/**
 * {class-name}Controller.java
 * 
 * @author {author}
 * @version {version}
 * @description {description}Controller处理类
 * @history
 * {history-init}
 */
package com.vibes.todolist.module.{sub-module}.controller;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.beans.factory.annotation.Autowired;
import com.vibes.todolist.util.result.Result;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;

import com.baomidou.mybatisplus.core.metadata.IPage;
import com.vibes.todolist.mybatis.plus.base.BaseEntity;
import com.vibes.todolist.mybatis.plus.base.PagingScParamDto;
import com.vibes.todolist.module.{sub-module}.service.{class-name}Service;

/**
 * {class-name}Controller.java
 * 
 * @author {author}
 */
@RestController
@RequestMapping("/{class-id}")
@Api(tags = "{class-desc}")
public class {class-name}Controller {

    @Autowired
    private {class-name}Service {class-id}Service;

    @ApiOperation(value = "新增", notes = "新增")
    @ApiParam(name = "entity", value = "{class-desc}entity", required = true)
    @PostMapping("/add")
    public Result<String> add(@RequestBody final BaseEntity entity) {
        return {class-id}Service.add(entity);
    }

    @ApiOperation(value = "逻辑删", notes = "逻辑删")
    @ApiParam(name = "id", value = "ID", required = true)
    @PostMapping("/delete")
    public Result<String> delete(final String id) {
        return {class-id}Service.delete(id);
    }

    @ApiOperation(value = "修改", notes = "修改")
    @ApiParam(name = "entity", value = "{class-desc}entity", required = true)
    @PostMapping("/update")
    public Result<String> update(@RequestBody final BaseEntity entity) {
        return {class-id}Service.update(entity);
    }

    /**
     * {class-desc}分页查询处理
     * 
     * @param sc 分页查询参数
     * @return 查询结果
     */
    @ApiOperation(value = "分页", notes = "分页")
    @ApiParam(name = "sc", value = "分页查询条件", required = true)
    @GetMapping("/page")
    public Result<IPage<PagingScParamDto>> page(final PagingScParamDto sc) {
        return {class-id}Service.page(sc);
    }
}
